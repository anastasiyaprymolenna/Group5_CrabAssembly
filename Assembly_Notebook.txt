Crab Assembly Notebook:

2/6/2020

Assembler used: wtdbg2 "Redbean: A fuzzy Bruijn graph approach to long noisy reads assembly"

https://github.com/ruanjue/wtdbg2

  With E. coli, the software took 51 seconds to run on 40 cores the output contig file was 46551 records

sbatch used for King crab as follows:

```
#!/bin/bash

#SBATCH --account=bgmp          ### SLURM account which will be charged for the job
#SBATCH --partition=bgmp        ### Partition (like a queue in PBS)
#SBATCH --job-name=KingAss      ### Job Name
#SBATCH --output=KingAss.out         ### File in which to store job output
#SBATCH --error=KingAss.err          ### File in which to store job error messages
#SBATCH --time=7-00:00:00       ### Wall clock time limit in Days-HH:MM:SS
#SBATCH --nodes=1               ### Node count required for the job
#SBATCH --ntasks-per-node=1     ### Nuber of tasks to be launched per Node
#SBATCH --cpus-per-task=40       ### Number of cpus (cores) per task
#SBATCH --mail-user=aprymole@uoregon.edu
#SBATCH --mail-type=ALL

../wtdbg2/wtdbg2 -x sq -g 7g -t 40 -i /projects/bgmp/shared/2019_Crab_PacBio/KING/KING_CRAB_RAW.share.fasta -fo Run1/pacbio_king
../wtdbg2/wtpoa-cns -t 40 -i Run1/pacbio_king.ctg.lay.gz -fo Run1/pacbio_king.ctg.fa

```


Note* paths are not absolute
options used:
-x sq (indicates pacbio sequel II used for sequencing)
-g 7g (indicates the estimated genome size, since crab genome is 1-7, so we erred on the bigger side)
-t 40 (indicates 40 threads for the 40 CPUs the sbatch is assigned to)

Note*
-fo prefix option also works if you want to specify a directory to be outputted to
  for example -fo path/prefix will retain only the prefix for future files to be accessed by in the proper paths
  
